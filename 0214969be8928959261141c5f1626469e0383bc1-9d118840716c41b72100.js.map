{"version":3,"sources":["webpack://political-atlas/./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js","webpack://political-atlas/./node_modules/@babel/runtime/regenerator/index.js","webpack://political-atlas/./src/utils/utils.js","webpack://political-atlas/./node_modules/regenerator-runtime/runtime.js"],"names":["asyncGeneratorStep","gen","resolve","reject","_next","_throw","key","arg","info","value","error","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined","module","exports","capitalize","word","shadeColor","color","percentage","rgb","contrastColor","luma","copy","navigator","console","roundUpX","num","place","Math","roundDecimal2","chunker","chunkSize","arr","index","stored","validNumberString","stringifiedNumber","re","arrToHex","hexcode","Number","hex","runtime","Op","Object","prototype","hasOwn","hasOwnProperty","$Symbol","Symbol","iteratorSymbol","iterator","asyncIteratorSymbol","asyncIterator","toStringTagSymbol","toStringTag","define","obj","defineProperty","enumerable","configurable","writable","wrap","innerFn","outerFn","tryLocsList","protoGenerator","Generator","generator","create","context","Context","_invoke","state","GenStateSuspendedStart","method","GenStateExecuting","Error","GenStateCompleted","doneResult","delegate","delegateResult","maybeInvokeDelegate","ContinueSentinel","sent","_sent","dispatchException","abrupt","record","tryCatch","type","GenStateSuspendedYield","makeInvokeMethod","call","GeneratorFunction","GeneratorFunctionPrototype","IteratorPrototype","getProto","getPrototypeOf","NativeIteratorPrototype","values","Gp","defineIteratorMethods","forEach","AsyncIterator","PromiseImpl","invoke","result","__await","unwrapped","previousPromise","callInvokeWithMethodAndArg","TypeError","resultName","next","nextLoc","pushTryEntry","locs","entry","tryLoc","catchLoc","finallyLoc","afterLoc","tryEntries","push","resetTryEntry","completion","reset","iterable","iteratorMethod","isNaN","length","i","constructor","displayName","isGeneratorFunction","genFun","ctor","name","mark","setPrototypeOf","__proto__","awrap","async","iter","toString","keys","object","reverse","pop","skipTempReset","prev","charAt","slice","stop","rootRecord","rval","exception","handle","loc","caught","hasCatch","hasFinally","finallyEntry","complete","finish","thrown","delegateYield","regeneratorRuntime","accidentalStrictMode","Function"],"mappings":"uHAAA,SAASA,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQC,EAAKC,GACpE,IACE,IAAIC,EAAOP,EAAIK,GAAKC,GAChBE,EAAQD,EAAKC,MACjB,MAAOC,GAEP,YADAP,EAAOO,GAILF,EAAKG,KACPT,EAAQO,GAERG,QAAQV,QAAQO,GAAOI,KAAKT,EAAOC,GAIxB,SAASS,EAAkBC,GACxC,OAAO,WACL,IAAIC,EAAOC,KACPC,EAAOC,UACX,OAAO,IAAIP,SAAQ,SAAUV,EAASC,GACpC,IAAIF,EAAMc,EAAGK,MAAMJ,EAAME,GAEzB,SAASd,EAAMK,GACbT,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,OAAQI,GAGlE,SAASJ,EAAOgB,GACdrB,EAAmBC,EAAKC,EAASC,EAAQC,EAAOC,EAAQ,QAASgB,GAGnEjB,OAAMkB,O,sDC/BZC,EAAOC,QAAU,EAAjB,O,oSCAaC,EAAa,SAACC,GAAD,OACxBA,EAAA,gBAEO,mBAAUA,mBAAwBA,eAAlC,iBAFP,KADwB,MAMbC,EAAa,SAACC,EAAOC,GAAR,OACxBD,EAAA,KAAU,mBAASE,EAAMA,EAAf,MAGCC,EAAgB,SAAC,GAK5B,OAHc,KAF4B,KAEhB,KAFgB,KAEJ,KAFI,UAKnCC,WAAP,SAGWC,EAAI,mCAAG,wGAEVC,8BAFU,qFAKhBC,kBALgB,8FAAH,sDAUJC,EAAW,SAACC,EAAKC,GAAN,OAAgBC,UAAUF,EAAVE,GAAhB,GAEXC,EAAgB,SAACH,GAAD,OAAUE,eAAWF,GAAZ,aAAT,IAEhBI,EAAU,SAACC,EAAWC,GAAZ,OACrBA,EAAA,QAAW,gBAMT,OALIC,KAAJ,EACEC,OAAY,CAAZA,IAEAA,EAAOA,SAAPA,WAEF,IAPmB,KAUVC,EAAoB,SAACC,GAEhC,MADA,aACOC,KAAP,IAGWC,EAAW,SAACN,GAAD,OACtBA,EAAA,QAAW,cACT,IAAMO,EAAUC,mBAAhB,IACA,OAAID,SAAJ,EAA+BE,MAAP,EACjBA,EAAP,IAJoB,O,iBCxCxB,IAAIC,EAAW,SAAU7B,GACvB,aAEA,IAEIF,EAFAgC,EAAKC,OAAOC,UACZC,EAASH,EAAGI,eAEZC,EAA4B,mBAAXC,OAAwBA,OAAS,GAClDC,EAAiBF,EAAQG,UAAY,aACrCC,EAAsBJ,EAAQK,eAAiB,kBAC/CC,EAAoBN,EAAQO,aAAe,gBAE/C,SAASC,EAAOC,EAAK9D,EAAKG,GAOxB,OANA8C,OAAOc,eAAeD,EAAK9D,EAAK,CAC9BG,MAAOA,EACP6D,YAAY,EACZC,cAAc,EACdC,UAAU,IAELJ,EAAI9D,GAEb,IAEE6D,EAAO,GAAI,IACX,MAAO9C,GACP8C,EAAS,SAASC,EAAK9D,EAAKG,GAC1B,OAAO2D,EAAI9D,GAAOG,GAItB,SAASgE,EAAKC,EAASC,EAAS3D,EAAM4D,GAEpC,IAAIC,EAAiBF,GAAWA,EAAQnB,qBAAqBsB,EAAYH,EAAUG,EAC/EC,EAAYxB,OAAOyB,OAAOH,EAAerB,WACzCyB,EAAU,IAAIC,EAAQN,GAAe,IAMzC,OAFAG,EAAUI,QAsMZ,SAA0BT,EAAS1D,EAAMiE,GACvC,IAAIG,EAAQC,EAEZ,OAAO,SAAgBC,EAAQ/E,GAC7B,GAAI6E,IAAUG,EACZ,MAAM,IAAIC,MAAM,gCAGlB,GAAIJ,IAAUK,EAAmB,CAC/B,GAAe,UAAXH,EACF,MAAM/E,EAKR,OAAOmF,IAMT,IAHAT,EAAQK,OAASA,EACjBL,EAAQ1E,IAAMA,IAED,CACX,IAAIoF,EAAWV,EAAQU,SACvB,GAAIA,EAAU,CACZ,IAAIC,EAAiBC,EAAoBF,EAAUV,GACnD,GAAIW,EAAgB,CAClB,GAAIA,IAAmBE,EAAkB,SACzC,OAAOF,GAIX,GAAuB,SAAnBX,EAAQK,OAGVL,EAAQc,KAAOd,EAAQe,MAAQf,EAAQ1E,SAElC,GAAuB,UAAnB0E,EAAQK,OAAoB,CACrC,GAAIF,IAAUC,EAEZ,MADAD,EAAQK,EACFR,EAAQ1E,IAGhB0E,EAAQgB,kBAAkBhB,EAAQ1E,SAEN,WAAnB0E,EAAQK,QACjBL,EAAQiB,OAAO,SAAUjB,EAAQ1E,KAGnC6E,EAAQG,EAER,IAAIY,EAASC,EAAS1B,EAAS1D,EAAMiE,GACrC,GAAoB,WAAhBkB,EAAOE,KAAmB,CAO5B,GAJAjB,EAAQH,EAAQtE,KACZ8E,EACAa,EAEAH,EAAO5F,MAAQuF,EACjB,SAGF,MAAO,CACLrF,MAAO0F,EAAO5F,IACdI,KAAMsE,EAAQtE,MAGS,UAAhBwF,EAAOE,OAChBjB,EAAQK,EAGRR,EAAQK,OAAS,QACjBL,EAAQ1E,IAAM4F,EAAO5F,OA9QPgG,CAAiB7B,EAAS1D,EAAMiE,GAE7CF,EAcT,SAASqB,EAASrF,EAAIqD,EAAK7D,GACzB,IACE,MAAO,CAAE8F,KAAM,SAAU9F,IAAKQ,EAAGyF,KAAKpC,EAAK7D,IAC3C,MAAOc,GACP,MAAO,CAAEgF,KAAM,QAAS9F,IAAKc,IAhBjCG,EAAQiD,KAAOA,EAoBf,IAAIY,EAAyB,iBACzBiB,EAAyB,iBACzBf,EAAoB,YACpBE,EAAoB,YAIpBK,EAAmB,GAMvB,SAAShB,KACT,SAAS2B,KACT,SAASC,KAIT,IAAIC,EAAoB,GACxBA,EAAkB9C,GAAkB,WAClC,OAAO5C,MAGT,IAAI2F,EAAWrD,OAAOsD,eAClBC,EAA0BF,GAAYA,EAASA,EAASG,EAAO,MAC/DD,GACAA,IAA4BxD,GAC5BG,EAAO+C,KAAKM,EAAyBjD,KAGvC8C,EAAoBG,GAGtB,IAAIE,EAAKN,EAA2BlD,UAClCsB,EAAUtB,UAAYD,OAAOyB,OAAO2B,GAWtC,SAASM,EAAsBzD,GAC7B,CAAC,OAAQ,QAAS,UAAU0D,SAAQ,SAAS5B,GAC3CnB,EAAOX,EAAW8B,GAAQ,SAAS/E,GACjC,OAAOU,KAAKkE,QAAQG,EAAQ/E,SAkClC,SAAS4G,EAAcpC,EAAWqC,GAChC,SAASC,EAAO/B,EAAQ/E,EAAKL,EAASC,GACpC,IAAIgG,EAASC,EAASrB,EAAUO,GAASP,EAAWxE,GACpD,GAAoB,UAAhB4F,EAAOE,KAEJ,CACL,IAAIiB,EAASnB,EAAO5F,IAChBE,EAAQ6G,EAAO7G,MACnB,OAAIA,GACiB,iBAAVA,GACPgD,EAAO+C,KAAK/F,EAAO,WACd2G,EAAYlH,QAAQO,EAAM8G,SAAS1G,MAAK,SAASJ,GACtD4G,EAAO,OAAQ5G,EAAOP,EAASC,MAC9B,SAASkB,GACVgG,EAAO,QAAShG,EAAKnB,EAASC,MAI3BiH,EAAYlH,QAAQO,GAAOI,MAAK,SAAS2G,GAI9CF,EAAO7G,MAAQ+G,EACftH,EAAQoH,MACP,SAAS5G,GAGV,OAAO2G,EAAO,QAAS3G,EAAOR,EAASC,MAvBzCA,EAAOgG,EAAO5F,KA4BlB,IAAIkH,EAgCJxG,KAAKkE,QA9BL,SAAiBG,EAAQ/E,GACvB,SAASmH,IACP,OAAO,IAAIN,GAAY,SAASlH,EAASC,GACvCkH,EAAO/B,EAAQ/E,EAAKL,EAASC,MAIjC,OAAOsH,EAaLA,EAAkBA,EAAgB5G,KAChC6G,EAGAA,GACEA,KAkHV,SAAS7B,EAAoBF,EAAUV,GACrC,IAAIK,EAASK,EAAS7B,SAASmB,EAAQK,QACvC,GAAIA,IAAWhE,EAAW,CAKxB,GAFA2D,EAAQU,SAAW,KAEI,UAAnBV,EAAQK,OAAoB,CAE9B,GAAIK,EAAS7B,SAAiB,SAG5BmB,EAAQK,OAAS,SACjBL,EAAQ1E,IAAMe,EACduE,EAAoBF,EAAUV,GAEP,UAAnBA,EAAQK,QAGV,OAAOQ,EAIXb,EAAQK,OAAS,QACjBL,EAAQ1E,IAAM,IAAIoH,UAChB,kDAGJ,OAAO7B,EAGT,IAAIK,EAASC,EAASd,EAAQK,EAAS7B,SAAUmB,EAAQ1E,KAEzD,GAAoB,UAAhB4F,EAAOE,KAIT,OAHApB,EAAQK,OAAS,QACjBL,EAAQ1E,IAAM4F,EAAO5F,IACrB0E,EAAQU,SAAW,KACZG,EAGT,IAAItF,EAAO2F,EAAO5F,IAElB,OAAMC,EAOFA,EAAKG,MAGPsE,EAAQU,EAASiC,YAAcpH,EAAKC,MAGpCwE,EAAQ4C,KAAOlC,EAASmC,QAQD,WAAnB7C,EAAQK,SACVL,EAAQK,OAAS,OACjBL,EAAQ1E,IAAMe,GAUlB2D,EAAQU,SAAW,KACZG,GANEtF,GA3BPyE,EAAQK,OAAS,QACjBL,EAAQ1E,IAAM,IAAIoH,UAAU,oCAC5B1C,EAAQU,SAAW,KACZG,GAoDX,SAASiC,EAAaC,GACpB,IAAIC,EAAQ,CAAEC,OAAQF,EAAK,IAEvB,KAAKA,IACPC,EAAME,SAAWH,EAAK,IAGpB,KAAKA,IACPC,EAAMG,WAAaJ,EAAK,GACxBC,EAAMI,SAAWL,EAAK,IAGxB/G,KAAKqH,WAAWC,KAAKN,GAGvB,SAASO,EAAcP,GACrB,IAAI9B,EAAS8B,EAAMQ,YAAc,GACjCtC,EAAOE,KAAO,gBACPF,EAAO5F,IACd0H,EAAMQ,WAAatC,EAGrB,SAASjB,EAAQN,GAIf3D,KAAKqH,WAAa,CAAC,CAAEJ,OAAQ,SAC7BtD,EAAYsC,QAAQa,EAAc9G,MAClCA,KAAKyH,OAAM,GA8Bb,SAAS3B,EAAO4B,GACd,GAAIA,EAAU,CACZ,IAAIC,EAAiBD,EAAS9E,GAC9B,GAAI+E,EACF,OAAOA,EAAepC,KAAKmC,GAG7B,GAA6B,mBAAlBA,EAASd,KAClB,OAAOc,EAGT,IAAKE,MAAMF,EAASG,QAAS,CAC3B,IAAIC,GAAK,EAAGlB,EAAO,SAASA,IAC1B,OAASkB,EAAIJ,EAASG,QACpB,GAAIrF,EAAO+C,KAAKmC,EAAUI,GAGxB,OAFAlB,EAAKpH,MAAQkI,EAASI,GACtBlB,EAAKlH,MAAO,EACLkH,EAOX,OAHAA,EAAKpH,MAAQa,EACbuG,EAAKlH,MAAO,EAELkH,GAGT,OAAOA,EAAKA,KAAOA,GAKvB,MAAO,CAAEA,KAAMnC,GAIjB,SAASA,IACP,MAAO,CAAEjF,MAAOa,EAAWX,MAAM,GA+MnC,OA5mBA8F,EAAkBjD,UAAYwD,EAAGgC,YAActC,EAC/CA,EAA2BsC,YAAcvC,EACzCA,EAAkBwC,YAAc9E,EAC9BuC,EACAzC,EACA,qBAaFzC,EAAQ0H,oBAAsB,SAASC,GACrC,IAAIC,EAAyB,mBAAXD,GAAyBA,EAAOH,YAClD,QAAOI,IACHA,IAAS3C,GAG2B,uBAAnC2C,EAAKH,aAAeG,EAAKC,QAIhC7H,EAAQ8H,KAAO,SAASH,GAQtB,OAPI5F,OAAOgG,eACThG,OAAOgG,eAAeJ,EAAQzC,IAE9ByC,EAAOK,UAAY9C,EACnBvC,EAAOgF,EAAQlF,EAAmB,sBAEpCkF,EAAO3F,UAAYD,OAAOyB,OAAOgC,GAC1BmC,GAOT3H,EAAQiI,MAAQ,SAASlJ,GACvB,MAAO,CAAEgH,QAAShH,IAsEpB0G,EAAsBE,EAAc3D,WACpC2D,EAAc3D,UAAUO,GAAuB,WAC7C,OAAO9C,MAETO,EAAQ2F,cAAgBA,EAKxB3F,EAAQkI,MAAQ,SAAShF,EAASC,EAAS3D,EAAM4D,EAAawC,QACxC,IAAhBA,IAAwBA,EAAcxG,SAE1C,IAAI+I,EAAO,IAAIxC,EACb1C,EAAKC,EAASC,EAAS3D,EAAM4D,GAC7BwC,GAGF,OAAO5F,EAAQ0H,oBAAoBvE,GAC/BgF,EACAA,EAAK9B,OAAOhH,MAAK,SAASyG,GACxB,OAAOA,EAAO3G,KAAO2G,EAAO7G,MAAQkJ,EAAK9B,WAuKjDZ,EAAsBD,GAEtB7C,EAAO6C,EAAI/C,EAAmB,aAO9B+C,EAAGnD,GAAkB,WACnB,OAAO5C,MAGT+F,EAAG4C,SAAW,WACZ,MAAO,sBAkCTpI,EAAQqI,KAAO,SAASC,GACtB,IAAID,EAAO,GACX,IAAK,IAAIvJ,KAAOwJ,EACdD,EAAKtB,KAAKjI,GAMZ,OAJAuJ,EAAKE,UAIE,SAASlC,IACd,KAAOgC,EAAKf,QAAQ,CAClB,IAAIxI,EAAMuJ,EAAKG,MACf,GAAI1J,KAAOwJ,EAGT,OAFAjC,EAAKpH,MAAQH,EACbuH,EAAKlH,MAAO,EACLkH,EAQX,OADAA,EAAKlH,MAAO,EACLkH,IAsCXrG,EAAQuF,OAASA,EAMjB7B,EAAQ1B,UAAY,CAClBwF,YAAa9D,EAEbwD,MAAO,SAASuB,GAcd,GAbAhJ,KAAKiJ,KAAO,EACZjJ,KAAK4G,KAAO,EAGZ5G,KAAK8E,KAAO9E,KAAK+E,MAAQ1E,EACzBL,KAAKN,MAAO,EACZM,KAAK0E,SAAW,KAEhB1E,KAAKqE,OAAS,OACdrE,KAAKV,IAAMe,EAEXL,KAAKqH,WAAWpB,QAAQsB,IAEnByB,EACH,IAAK,IAAIZ,KAAQpI,KAEQ,MAAnBoI,EAAKc,OAAO,IACZ1G,EAAO+C,KAAKvF,KAAMoI,KACjBR,OAAOQ,EAAKe,MAAM,MACrBnJ,KAAKoI,GAAQ/H,IAMrB+I,KAAM,WACJpJ,KAAKN,MAAO,EAEZ,IACI2J,EADYrJ,KAAKqH,WAAW,GACLG,WAC3B,GAAwB,UAApB6B,EAAWjE,KACb,MAAMiE,EAAW/J,IAGnB,OAAOU,KAAKsJ,MAGdtE,kBAAmB,SAASuE,GAC1B,GAAIvJ,KAAKN,KACP,MAAM6J,EAGR,IAAIvF,EAAUhE,KACd,SAASwJ,EAAOC,EAAKC,GAYnB,OAXAxE,EAAOE,KAAO,QACdF,EAAO5F,IAAMiK,EACbvF,EAAQ4C,KAAO6C,EAEXC,IAGF1F,EAAQK,OAAS,OACjBL,EAAQ1E,IAAMe,KAGNqJ,EAGZ,IAAK,IAAI5B,EAAI9H,KAAKqH,WAAWQ,OAAS,EAAGC,GAAK,IAAKA,EAAG,CACpD,IAAId,EAAQhH,KAAKqH,WAAWS,GACxB5C,EAAS8B,EAAMQ,WAEnB,GAAqB,SAAjBR,EAAMC,OAIR,OAAOuC,EAAO,OAGhB,GAAIxC,EAAMC,QAAUjH,KAAKiJ,KAAM,CAC7B,IAAIU,EAAWnH,EAAO+C,KAAKyB,EAAO,YAC9B4C,EAAapH,EAAO+C,KAAKyB,EAAO,cAEpC,GAAI2C,GAAYC,EAAY,CAC1B,GAAI5J,KAAKiJ,KAAOjC,EAAME,SACpB,OAAOsC,EAAOxC,EAAME,UAAU,GACzB,GAAIlH,KAAKiJ,KAAOjC,EAAMG,WAC3B,OAAOqC,EAAOxC,EAAMG,iBAGjB,GAAIwC,GACT,GAAI3J,KAAKiJ,KAAOjC,EAAME,SACpB,OAAOsC,EAAOxC,EAAME,UAAU,OAG3B,KAAI0C,EAMT,MAAM,IAAIrF,MAAM,0CALhB,GAAIvE,KAAKiJ,KAAOjC,EAAMG,WACpB,OAAOqC,EAAOxC,EAAMG,gBAU9BlC,OAAQ,SAASG,EAAM9F,GACrB,IAAK,IAAIwI,EAAI9H,KAAKqH,WAAWQ,OAAS,EAAGC,GAAK,IAAKA,EAAG,CACpD,IAAId,EAAQhH,KAAKqH,WAAWS,GAC5B,GAAId,EAAMC,QAAUjH,KAAKiJ,MACrBzG,EAAO+C,KAAKyB,EAAO,eACnBhH,KAAKiJ,KAAOjC,EAAMG,WAAY,CAChC,IAAI0C,EAAe7C,EACnB,OAIA6C,IACU,UAATzE,GACS,aAATA,IACDyE,EAAa5C,QAAU3H,GACvBA,GAAOuK,EAAa1C,aAGtB0C,EAAe,MAGjB,IAAI3E,EAAS2E,EAAeA,EAAarC,WAAa,GAItD,OAHAtC,EAAOE,KAAOA,EACdF,EAAO5F,IAAMA,EAETuK,GACF7J,KAAKqE,OAAS,OACdrE,KAAK4G,KAAOiD,EAAa1C,WAClBtC,GAGF7E,KAAK8J,SAAS5E,IAGvB4E,SAAU,SAAS5E,EAAQkC,GACzB,GAAoB,UAAhBlC,EAAOE,KACT,MAAMF,EAAO5F,IAcf,MAXoB,UAAhB4F,EAAOE,MACS,aAAhBF,EAAOE,KACTpF,KAAK4G,KAAO1B,EAAO5F,IACM,WAAhB4F,EAAOE,MAChBpF,KAAKsJ,KAAOtJ,KAAKV,IAAM4F,EAAO5F,IAC9BU,KAAKqE,OAAS,SACdrE,KAAK4G,KAAO,OACa,WAAhB1B,EAAOE,MAAqBgC,IACrCpH,KAAK4G,KAAOQ,GAGPvC,GAGTkF,OAAQ,SAAS5C,GACf,IAAK,IAAIW,EAAI9H,KAAKqH,WAAWQ,OAAS,EAAGC,GAAK,IAAKA,EAAG,CACpD,IAAId,EAAQhH,KAAKqH,WAAWS,GAC5B,GAAId,EAAMG,aAAeA,EAGvB,OAFAnH,KAAK8J,SAAS9C,EAAMQ,WAAYR,EAAMI,UACtCG,EAAcP,GACPnC,IAKb,MAAS,SAASoC,GAChB,IAAK,IAAIa,EAAI9H,KAAKqH,WAAWQ,OAAS,EAAGC,GAAK,IAAKA,EAAG,CACpD,IAAId,EAAQhH,KAAKqH,WAAWS,GAC5B,GAAId,EAAMC,SAAWA,EAAQ,CAC3B,IAAI/B,EAAS8B,EAAMQ,WACnB,GAAoB,UAAhBtC,EAAOE,KAAkB,CAC3B,IAAI4E,EAAS9E,EAAO5F,IACpBiI,EAAcP,GAEhB,OAAOgD,GAMX,MAAM,IAAIzF,MAAM,0BAGlB0F,cAAe,SAASvC,EAAUf,EAAYE,GAa5C,OAZA7G,KAAK0E,SAAW,CACd7B,SAAUiD,EAAO4B,GACjBf,WAAYA,EACZE,QAASA,GAGS,SAAhB7G,KAAKqE,SAGPrE,KAAKV,IAAMe,GAGNwE,IAQJtE,EA7sBK,CAotBiBD,EAAOC,SAGtC,IACE2J,mBAAqB9H,EACrB,MAAO+H,GAUPC,SAAS,IAAK,yBAAdA,CAAwChI","file":"0214969be8928959261141c5f1626469e0383bc1-9d118840716c41b72100.js","sourcesContent":["function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}","module.exports = require(\"regenerator-runtime\");\n","export const capitalize = (word) =>\n  word\n    .split(\" \")\n    .map((word) => word[0].toUpperCase() + word.substring(1).toLowerCase())\n    .join(\" \");\n\nexport const shadeColor = (color, percentage) =>\n  color.map((rgb) => rgb + rgb * percentage);\n\n// https://stackoverflow.com/a/36888120\nexport const contrastColor = ([r, g, b]) => {\n  // calculate the perceptive luminance (aka luma) - human eye favors green color...\n  const luma = (0.299 * r + 0.587 * g + 0.114 * b) / 255;\n\n  // return black for bright colors, white for dark colors\n  return luma > 0.5 ? \"black\" : \"white\";\n};\n\nexport const copy = async (item) => {\n  try {\n    await navigator.clipboard.writeText(item);\n    return \"Copied!\";\n  } catch (err) {\n    console.log(err);\n    return \"Failed to copy!\";\n  }\n};\n\nexport const roundUpX = (num, place) => Math.ceil(num / place) * place;\n\nexport const roundDecimal2 = (num) => (Math.round(num * 100) / 100).toFixed(2);\n\nexport const chunker = (chunkSize, arr) =>\n  arr.reduce((stored, current, index) => {\n    if (index % chunkSize === 0) {\n      stored.push([current]);\n    } else {\n      stored[stored.length - 1].push(current);\n    }\n    return stored;\n  }, []);\n\nexport const validNumberString = (stringifiedNumber) => {\n  const re = /^[0-9\\b]+$/;\n  return re.test(stringifiedNumber);\n};\n\nexport const arrToHex = (arr) =>\n  arr.reduce((hex, code) => {\n    const hexcode = Number(code).toString(16);\n    if (hexcode.length < 2) return hex + \"0\" + hexcode;\n    return hex + hexcode;\n  }, \"#\");\n","/**\n * Copyright (c) 2014-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nvar runtime = (function (exports) {\n  \"use strict\";\n\n  var Op = Object.prototype;\n  var hasOwn = Op.hasOwnProperty;\n  var undefined; // More compressible than void 0.\n  var $Symbol = typeof Symbol === \"function\" ? Symbol : {};\n  var iteratorSymbol = $Symbol.iterator || \"@@iterator\";\n  var asyncIteratorSymbol = $Symbol.asyncIterator || \"@@asyncIterator\";\n  var toStringTagSymbol = $Symbol.toStringTag || \"@@toStringTag\";\n\n  function define(obj, key, value) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n    return obj[key];\n  }\n  try {\n    // IE 8 has a broken Object.defineProperty that only works on DOM objects.\n    define({}, \"\");\n  } catch (err) {\n    define = function(obj, key, value) {\n      return obj[key] = value;\n    };\n  }\n\n  function wrap(innerFn, outerFn, self, tryLocsList) {\n    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.\n    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;\n    var generator = Object.create(protoGenerator.prototype);\n    var context = new Context(tryLocsList || []);\n\n    // The ._invoke method unifies the implementations of the .next,\n    // .throw, and .return methods.\n    generator._invoke = makeInvokeMethod(innerFn, self, context);\n\n    return generator;\n  }\n  exports.wrap = wrap;\n\n  // Try/catch helper to minimize deoptimizations. Returns a completion\n  // record like context.tryEntries[i].completion. This interface could\n  // have been (and was previously) designed to take a closure to be\n  // invoked without arguments, but in all the cases we care about we\n  // already have an existing method we want to call, so there's no need\n  // to create a new function object. We can even get away with assuming\n  // the method takes exactly one argument, since that happens to be true\n  // in every case, so we don't have to touch the arguments object. The\n  // only additional allocation required is the completion record, which\n  // has a stable shape and so hopefully should be cheap to allocate.\n  function tryCatch(fn, obj, arg) {\n    try {\n      return { type: \"normal\", arg: fn.call(obj, arg) };\n    } catch (err) {\n      return { type: \"throw\", arg: err };\n    }\n  }\n\n  var GenStateSuspendedStart = \"suspendedStart\";\n  var GenStateSuspendedYield = \"suspendedYield\";\n  var GenStateExecuting = \"executing\";\n  var GenStateCompleted = \"completed\";\n\n  // Returning this object from the innerFn has the same effect as\n  // breaking out of the dispatch switch statement.\n  var ContinueSentinel = {};\n\n  // Dummy constructor functions that we use as the .constructor and\n  // .constructor.prototype properties for functions that return Generator\n  // objects. For full spec compliance, you may wish to configure your\n  // minifier not to mangle the names of these two functions.\n  function Generator() {}\n  function GeneratorFunction() {}\n  function GeneratorFunctionPrototype() {}\n\n  // This is a polyfill for %IteratorPrototype% for environments that\n  // don't natively support it.\n  var IteratorPrototype = {};\n  IteratorPrototype[iteratorSymbol] = function () {\n    return this;\n  };\n\n  var getProto = Object.getPrototypeOf;\n  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));\n  if (NativeIteratorPrototype &&\n      NativeIteratorPrototype !== Op &&\n      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {\n    // This environment has a native %IteratorPrototype%; use it instead\n    // of the polyfill.\n    IteratorPrototype = NativeIteratorPrototype;\n  }\n\n  var Gp = GeneratorFunctionPrototype.prototype =\n    Generator.prototype = Object.create(IteratorPrototype);\n  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;\n  GeneratorFunctionPrototype.constructor = GeneratorFunction;\n  GeneratorFunction.displayName = define(\n    GeneratorFunctionPrototype,\n    toStringTagSymbol,\n    \"GeneratorFunction\"\n  );\n\n  // Helper for defining the .next, .throw, and .return methods of the\n  // Iterator interface in terms of a single ._invoke method.\n  function defineIteratorMethods(prototype) {\n    [\"next\", \"throw\", \"return\"].forEach(function(method) {\n      define(prototype, method, function(arg) {\n        return this._invoke(method, arg);\n      });\n    });\n  }\n\n  exports.isGeneratorFunction = function(genFun) {\n    var ctor = typeof genFun === \"function\" && genFun.constructor;\n    return ctor\n      ? ctor === GeneratorFunction ||\n        // For the native GeneratorFunction constructor, the best we can\n        // do is to check its .name property.\n        (ctor.displayName || ctor.name) === \"GeneratorFunction\"\n      : false;\n  };\n\n  exports.mark = function(genFun) {\n    if (Object.setPrototypeOf) {\n      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);\n    } else {\n      genFun.__proto__ = GeneratorFunctionPrototype;\n      define(genFun, toStringTagSymbol, \"GeneratorFunction\");\n    }\n    genFun.prototype = Object.create(Gp);\n    return genFun;\n  };\n\n  // Within the body of any async function, `await x` is transformed to\n  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test\n  // `hasOwn.call(value, \"__await\")` to determine if the yielded value is\n  // meant to be awaited.\n  exports.awrap = function(arg) {\n    return { __await: arg };\n  };\n\n  function AsyncIterator(generator, PromiseImpl) {\n    function invoke(method, arg, resolve, reject) {\n      var record = tryCatch(generator[method], generator, arg);\n      if (record.type === \"throw\") {\n        reject(record.arg);\n      } else {\n        var result = record.arg;\n        var value = result.value;\n        if (value &&\n            typeof value === \"object\" &&\n            hasOwn.call(value, \"__await\")) {\n          return PromiseImpl.resolve(value.__await).then(function(value) {\n            invoke(\"next\", value, resolve, reject);\n          }, function(err) {\n            invoke(\"throw\", err, resolve, reject);\n          });\n        }\n\n        return PromiseImpl.resolve(value).then(function(unwrapped) {\n          // When a yielded Promise is resolved, its final value becomes\n          // the .value of the Promise<{value,done}> result for the\n          // current iteration.\n          result.value = unwrapped;\n          resolve(result);\n        }, function(error) {\n          // If a rejected Promise was yielded, throw the rejection back\n          // into the async generator function so it can be handled there.\n          return invoke(\"throw\", error, resolve, reject);\n        });\n      }\n    }\n\n    var previousPromise;\n\n    function enqueue(method, arg) {\n      function callInvokeWithMethodAndArg() {\n        return new PromiseImpl(function(resolve, reject) {\n          invoke(method, arg, resolve, reject);\n        });\n      }\n\n      return previousPromise =\n        // If enqueue has been called before, then we want to wait until\n        // all previous Promises have been resolved before calling invoke,\n        // so that results are always delivered in the correct order. If\n        // enqueue has not been called before, then it is important to\n        // call invoke immediately, without waiting on a callback to fire,\n        // so that the async generator function has the opportunity to do\n        // any necessary setup in a predictable way. This predictability\n        // is why the Promise constructor synchronously invokes its\n        // executor callback, and why async functions synchronously\n        // execute code before the first await. Since we implement simple\n        // async functions in terms of async generators, it is especially\n        // important to get this right, even though it requires care.\n        previousPromise ? previousPromise.then(\n          callInvokeWithMethodAndArg,\n          // Avoid propagating failures to Promises returned by later\n          // invocations of the iterator.\n          callInvokeWithMethodAndArg\n        ) : callInvokeWithMethodAndArg();\n    }\n\n    // Define the unified helper method that is used to implement .next,\n    // .throw, and .return (see defineIteratorMethods).\n    this._invoke = enqueue;\n  }\n\n  defineIteratorMethods(AsyncIterator.prototype);\n  AsyncIterator.prototype[asyncIteratorSymbol] = function () {\n    return this;\n  };\n  exports.AsyncIterator = AsyncIterator;\n\n  // Note that simple async functions are implemented on top of\n  // AsyncIterator objects; they just return a Promise for the value of\n  // the final result produced by the iterator.\n  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {\n    if (PromiseImpl === void 0) PromiseImpl = Promise;\n\n    var iter = new AsyncIterator(\n      wrap(innerFn, outerFn, self, tryLocsList),\n      PromiseImpl\n    );\n\n    return exports.isGeneratorFunction(outerFn)\n      ? iter // If outerFn is a generator, return the full iterator.\n      : iter.next().then(function(result) {\n          return result.done ? result.value : iter.next();\n        });\n  };\n\n  function makeInvokeMethod(innerFn, self, context) {\n    var state = GenStateSuspendedStart;\n\n    return function invoke(method, arg) {\n      if (state === GenStateExecuting) {\n        throw new Error(\"Generator is already running\");\n      }\n\n      if (state === GenStateCompleted) {\n        if (method === \"throw\") {\n          throw arg;\n        }\n\n        // Be forgiving, per 25.3.3.3.3 of the spec:\n        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume\n        return doneResult();\n      }\n\n      context.method = method;\n      context.arg = arg;\n\n      while (true) {\n        var delegate = context.delegate;\n        if (delegate) {\n          var delegateResult = maybeInvokeDelegate(delegate, context);\n          if (delegateResult) {\n            if (delegateResult === ContinueSentinel) continue;\n            return delegateResult;\n          }\n        }\n\n        if (context.method === \"next\") {\n          // Setting context._sent for legacy support of Babel's\n          // function.sent implementation.\n          context.sent = context._sent = context.arg;\n\n        } else if (context.method === \"throw\") {\n          if (state === GenStateSuspendedStart) {\n            state = GenStateCompleted;\n            throw context.arg;\n          }\n\n          context.dispatchException(context.arg);\n\n        } else if (context.method === \"return\") {\n          context.abrupt(\"return\", context.arg);\n        }\n\n        state = GenStateExecuting;\n\n        var record = tryCatch(innerFn, self, context);\n        if (record.type === \"normal\") {\n          // If an exception is thrown from innerFn, we leave state ===\n          // GenStateExecuting and loop back for another invocation.\n          state = context.done\n            ? GenStateCompleted\n            : GenStateSuspendedYield;\n\n          if (record.arg === ContinueSentinel) {\n            continue;\n          }\n\n          return {\n            value: record.arg,\n            done: context.done\n          };\n\n        } else if (record.type === \"throw\") {\n          state = GenStateCompleted;\n          // Dispatch the exception by looping back around to the\n          // context.dispatchException(context.arg) call above.\n          context.method = \"throw\";\n          context.arg = record.arg;\n        }\n      }\n    };\n  }\n\n  // Call delegate.iterator[context.method](context.arg) and handle the\n  // result, either by returning a { value, done } result from the\n  // delegate iterator, or by modifying context.method and context.arg,\n  // setting context.delegate to null, and returning the ContinueSentinel.\n  function maybeInvokeDelegate(delegate, context) {\n    var method = delegate.iterator[context.method];\n    if (method === undefined) {\n      // A .throw or .return when the delegate iterator has no .throw\n      // method always terminates the yield* loop.\n      context.delegate = null;\n\n      if (context.method === \"throw\") {\n        // Note: [\"return\"] must be used for ES3 parsing compatibility.\n        if (delegate.iterator[\"return\"]) {\n          // If the delegate iterator has a return method, give it a\n          // chance to clean up.\n          context.method = \"return\";\n          context.arg = undefined;\n          maybeInvokeDelegate(delegate, context);\n\n          if (context.method === \"throw\") {\n            // If maybeInvokeDelegate(context) changed context.method from\n            // \"return\" to \"throw\", let that override the TypeError below.\n            return ContinueSentinel;\n          }\n        }\n\n        context.method = \"throw\";\n        context.arg = new TypeError(\n          \"The iterator does not provide a 'throw' method\");\n      }\n\n      return ContinueSentinel;\n    }\n\n    var record = tryCatch(method, delegate.iterator, context.arg);\n\n    if (record.type === \"throw\") {\n      context.method = \"throw\";\n      context.arg = record.arg;\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    var info = record.arg;\n\n    if (! info) {\n      context.method = \"throw\";\n      context.arg = new TypeError(\"iterator result is not an object\");\n      context.delegate = null;\n      return ContinueSentinel;\n    }\n\n    if (info.done) {\n      // Assign the result of the finished delegate to the temporary\n      // variable specified by delegate.resultName (see delegateYield).\n      context[delegate.resultName] = info.value;\n\n      // Resume execution at the desired location (see delegateYield).\n      context.next = delegate.nextLoc;\n\n      // If context.method was \"throw\" but the delegate handled the\n      // exception, let the outer generator proceed normally. If\n      // context.method was \"next\", forget context.arg since it has been\n      // \"consumed\" by the delegate iterator. If context.method was\n      // \"return\", allow the original .return call to continue in the\n      // outer generator.\n      if (context.method !== \"return\") {\n        context.method = \"next\";\n        context.arg = undefined;\n      }\n\n    } else {\n      // Re-yield the result returned by the delegate method.\n      return info;\n    }\n\n    // The delegate iterator is finished, so forget it and continue with\n    // the outer generator.\n    context.delegate = null;\n    return ContinueSentinel;\n  }\n\n  // Define Generator.prototype.{next,throw,return} in terms of the\n  // unified ._invoke helper method.\n  defineIteratorMethods(Gp);\n\n  define(Gp, toStringTagSymbol, \"Generator\");\n\n  // A Generator should always return itself as the iterator object when the\n  // @@iterator function is called on it. Some browsers' implementations of the\n  // iterator prototype chain incorrectly implement this, causing the Generator\n  // object to not be returned from this call. This ensures that doesn't happen.\n  // See https://github.com/facebook/regenerator/issues/274 for more details.\n  Gp[iteratorSymbol] = function() {\n    return this;\n  };\n\n  Gp.toString = function() {\n    return \"[object Generator]\";\n  };\n\n  function pushTryEntry(locs) {\n    var entry = { tryLoc: locs[0] };\n\n    if (1 in locs) {\n      entry.catchLoc = locs[1];\n    }\n\n    if (2 in locs) {\n      entry.finallyLoc = locs[2];\n      entry.afterLoc = locs[3];\n    }\n\n    this.tryEntries.push(entry);\n  }\n\n  function resetTryEntry(entry) {\n    var record = entry.completion || {};\n    record.type = \"normal\";\n    delete record.arg;\n    entry.completion = record;\n  }\n\n  function Context(tryLocsList) {\n    // The root entry object (effectively a try statement without a catch\n    // or a finally block) gives us a place to store values thrown from\n    // locations where there is no enclosing try statement.\n    this.tryEntries = [{ tryLoc: \"root\" }];\n    tryLocsList.forEach(pushTryEntry, this);\n    this.reset(true);\n  }\n\n  exports.keys = function(object) {\n    var keys = [];\n    for (var key in object) {\n      keys.push(key);\n    }\n    keys.reverse();\n\n    // Rather than returning an object with a next method, we keep\n    // things simple and return the next function itself.\n    return function next() {\n      while (keys.length) {\n        var key = keys.pop();\n        if (key in object) {\n          next.value = key;\n          next.done = false;\n          return next;\n        }\n      }\n\n      // To avoid creating an additional object, we just hang the .value\n      // and .done properties off the next function object itself. This\n      // also ensures that the minifier will not anonymize the function.\n      next.done = true;\n      return next;\n    };\n  };\n\n  function values(iterable) {\n    if (iterable) {\n      var iteratorMethod = iterable[iteratorSymbol];\n      if (iteratorMethod) {\n        return iteratorMethod.call(iterable);\n      }\n\n      if (typeof iterable.next === \"function\") {\n        return iterable;\n      }\n\n      if (!isNaN(iterable.length)) {\n        var i = -1, next = function next() {\n          while (++i < iterable.length) {\n            if (hasOwn.call(iterable, i)) {\n              next.value = iterable[i];\n              next.done = false;\n              return next;\n            }\n          }\n\n          next.value = undefined;\n          next.done = true;\n\n          return next;\n        };\n\n        return next.next = next;\n      }\n    }\n\n    // Return an iterator with no values.\n    return { next: doneResult };\n  }\n  exports.values = values;\n\n  function doneResult() {\n    return { value: undefined, done: true };\n  }\n\n  Context.prototype = {\n    constructor: Context,\n\n    reset: function(skipTempReset) {\n      this.prev = 0;\n      this.next = 0;\n      // Resetting context._sent for legacy support of Babel's\n      // function.sent implementation.\n      this.sent = this._sent = undefined;\n      this.done = false;\n      this.delegate = null;\n\n      this.method = \"next\";\n      this.arg = undefined;\n\n      this.tryEntries.forEach(resetTryEntry);\n\n      if (!skipTempReset) {\n        for (var name in this) {\n          // Not sure about the optimal order of these conditions:\n          if (name.charAt(0) === \"t\" &&\n              hasOwn.call(this, name) &&\n              !isNaN(+name.slice(1))) {\n            this[name] = undefined;\n          }\n        }\n      }\n    },\n\n    stop: function() {\n      this.done = true;\n\n      var rootEntry = this.tryEntries[0];\n      var rootRecord = rootEntry.completion;\n      if (rootRecord.type === \"throw\") {\n        throw rootRecord.arg;\n      }\n\n      return this.rval;\n    },\n\n    dispatchException: function(exception) {\n      if (this.done) {\n        throw exception;\n      }\n\n      var context = this;\n      function handle(loc, caught) {\n        record.type = \"throw\";\n        record.arg = exception;\n        context.next = loc;\n\n        if (caught) {\n          // If the dispatched exception was caught by a catch block,\n          // then let that catch block handle the exception normally.\n          context.method = \"next\";\n          context.arg = undefined;\n        }\n\n        return !! caught;\n      }\n\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        var record = entry.completion;\n\n        if (entry.tryLoc === \"root\") {\n          // Exception thrown outside of any try block that could handle\n          // it, so set the completion value of the entire function to\n          // throw the exception.\n          return handle(\"end\");\n        }\n\n        if (entry.tryLoc <= this.prev) {\n          var hasCatch = hasOwn.call(entry, \"catchLoc\");\n          var hasFinally = hasOwn.call(entry, \"finallyLoc\");\n\n          if (hasCatch && hasFinally) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            } else if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else if (hasCatch) {\n            if (this.prev < entry.catchLoc) {\n              return handle(entry.catchLoc, true);\n            }\n\n          } else if (hasFinally) {\n            if (this.prev < entry.finallyLoc) {\n              return handle(entry.finallyLoc);\n            }\n\n          } else {\n            throw new Error(\"try statement without catch or finally\");\n          }\n        }\n      }\n    },\n\n    abrupt: function(type, arg) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc <= this.prev &&\n            hasOwn.call(entry, \"finallyLoc\") &&\n            this.prev < entry.finallyLoc) {\n          var finallyEntry = entry;\n          break;\n        }\n      }\n\n      if (finallyEntry &&\n          (type === \"break\" ||\n           type === \"continue\") &&\n          finallyEntry.tryLoc <= arg &&\n          arg <= finallyEntry.finallyLoc) {\n        // Ignore the finally entry if control is not jumping to a\n        // location outside the try/catch block.\n        finallyEntry = null;\n      }\n\n      var record = finallyEntry ? finallyEntry.completion : {};\n      record.type = type;\n      record.arg = arg;\n\n      if (finallyEntry) {\n        this.method = \"next\";\n        this.next = finallyEntry.finallyLoc;\n        return ContinueSentinel;\n      }\n\n      return this.complete(record);\n    },\n\n    complete: function(record, afterLoc) {\n      if (record.type === \"throw\") {\n        throw record.arg;\n      }\n\n      if (record.type === \"break\" ||\n          record.type === \"continue\") {\n        this.next = record.arg;\n      } else if (record.type === \"return\") {\n        this.rval = this.arg = record.arg;\n        this.method = \"return\";\n        this.next = \"end\";\n      } else if (record.type === \"normal\" && afterLoc) {\n        this.next = afterLoc;\n      }\n\n      return ContinueSentinel;\n    },\n\n    finish: function(finallyLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.finallyLoc === finallyLoc) {\n          this.complete(entry.completion, entry.afterLoc);\n          resetTryEntry(entry);\n          return ContinueSentinel;\n        }\n      }\n    },\n\n    \"catch\": function(tryLoc) {\n      for (var i = this.tryEntries.length - 1; i >= 0; --i) {\n        var entry = this.tryEntries[i];\n        if (entry.tryLoc === tryLoc) {\n          var record = entry.completion;\n          if (record.type === \"throw\") {\n            var thrown = record.arg;\n            resetTryEntry(entry);\n          }\n          return thrown;\n        }\n      }\n\n      // The context.catch method must only be called with a location\n      // argument that corresponds to a known catch block.\n      throw new Error(\"illegal catch attempt\");\n    },\n\n    delegateYield: function(iterable, resultName, nextLoc) {\n      this.delegate = {\n        iterator: values(iterable),\n        resultName: resultName,\n        nextLoc: nextLoc\n      };\n\n      if (this.method === \"next\") {\n        // Deliberately forget the last sent value so that we don't\n        // accidentally pass it on to the delegate.\n        this.arg = undefined;\n      }\n\n      return ContinueSentinel;\n    }\n  };\n\n  // Regardless of whether this script is executing as a CommonJS module\n  // or not, return the runtime object so that we can declare the variable\n  // regeneratorRuntime in the outer scope, which allows this module to be\n  // injected easily by `bin/regenerator --include-runtime script.js`.\n  return exports;\n\n}(\n  // If this script is executing as a CommonJS module, use module.exports\n  // as the regeneratorRuntime namespace. Otherwise create a new empty\n  // object. Either way, the resulting object will be used to initialize\n  // the regeneratorRuntime variable at the top of this file.\n  typeof module === \"object\" ? module.exports : {}\n));\n\ntry {\n  regeneratorRuntime = runtime;\n} catch (accidentalStrictMode) {\n  // This module should not be running in strict mode, so the above\n  // assignment should always work unless something is misconfigured. Just\n  // in case runtime.js accidentally runs in strict mode, we can escape\n  // strict mode using a global Function call. This could conceivably fail\n  // if a Content Security Policy forbids using Function, but in that case\n  // the proper solution is to fix the accidental strict mode problem. If\n  // you've misconfigured your bundler to force strict mode and applied a\n  // CSP to forbid Function, and you're not willing to fix either of those\n  // problems, please detail your unique predicament in a GitHub issue.\n  Function(\"r\", \"regeneratorRuntime = r\")(runtime);\n}\n"],"sourceRoot":""}