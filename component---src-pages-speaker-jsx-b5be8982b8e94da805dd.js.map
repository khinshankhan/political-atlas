{"version":3,"sources":["webpack://political-atlas/./src/pages/speaker.jsx"],"names":["speaker","useQueryParam","StringParam","useState","data","setData","speeches","setSpeeches","ibm","setIbm","da","setDa","useEffect","getSpeakerAnalytics","fetchedData","fetchedSpeeches","fetchedIbm","fetchedDa","deepaffects","map","uniformIbmData","reduce","stored","current","sentences_tone","uniformDaData","flat","setup","console","log","title","variant","gutterBottom"],"mappings":"mQAyFA,UA7Ee,WACb,IAAOA,GAAWC,QAAc,UAAWC,MAA3C,GACA,GAAwBC,eAAS,GAA1BC,EAAP,KAAaC,EAAb,KACA,GAAgCF,cAAS,MAAlCG,EAAP,KAAiBC,EAAjB,KACA,GAAsBJ,cAAS,MAAxBK,EAAP,KAAYC,EAAZ,KACA,GAAoBN,cAAS,MAAtBO,EAAP,KAAWC,EAAX,KA6CA,OA3CAC,gBAAU,WAoCO,MAAXZ,GAA+B,KAAZA,GAnCZ,mCAAG,2GACca,QAAoBb,GADlC,UAGO,OAFbc,EADM,yDAQAC,EAGRD,EAHFR,SACKU,EAEHF,EAFFN,IACaS,EACXH,EADFI,YAGFT,EACEO,GACEA,EAAWG,IAAIC,KAAgBC,QAC7B,SAACC,EAAQC,GACP,wBACKD,EADL,CAEEE,eAAgB,GAAF,eACTF,EAAOE,iBADE,OAETD,EAAQC,qBAIjB,CAAEA,eAAgB,MAGxBb,EAAMM,GAAaA,EAAUE,IAAIM,KAAeC,QAEhDnB,EAAYQ,GAEZV,GAAQ,GAhCI,4CAAH,oDAoCTsB,KAED,CAAC3B,EAASK,IAEbuB,QAAQC,IAAI,CAAEvB,WAAUE,MAAKE,OAEd,MAAXV,GAA+B,KAAZA,EAEnB,gBAAC,IAAD,KACE,mEAMO,IAATI,EACK,gBAAC,IAAD,iBAIP,gBAAC,IAAD,CAAQ0B,MAAU9B,EAAL,cACX,gBAAC,IAAD,CAAY+B,QAAQ,KAAKC,cAAY,GAArC,kDAGA,gBAAC,IAAD,CAAmBxB,IAAKA,EAAKE,GAAIA,IACjC,gBAAC,IAAD,CAAYqB,QAAQ,KAAKC,cAAY,GAArC,YAGa,MAAZ1B,GAAoB,gBAAC,IAAD,CAAYA,SAAUA","file":"component---src-pages-speaker-jsx-b5be8982b8e94da805dd.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useQueryParam, StringParam } from \"use-query-params\";\n\nimport Typography from \"@material-ui/core/Typography\";\n\nimport { getSpeakerAnalytics } from \"src/api/Server\";\nimport { uniformDaData, uniformIbmData } from \"src/utils/dataTransformations\";\n\nimport Layout from \"src/components/Layout\";\nimport DataVisualization from \"src/components/DataVisualization\";\nimport SpeechList from \"src/components/SpeechList\";\n\nconst Speech = () => {\n  const [speaker] = useQueryParam(\"speaker\", StringParam);\n  const [data, setData] = useState(false);\n  const [speeches, setSpeeches] = useState(null);\n  const [ibm, setIbm] = useState(null);\n  const [da, setDa] = useState(null);\n\n  useEffect(() => {\n    const setup = async () => {\n      const fetchedData = await getSpeakerAnalytics(speaker);\n      // TODO: better handle this\n      if (fetchedData == null) {\n        return;\n      }\n\n      const {\n        speeches: fetchedSpeeches,\n        ibm: fetchedIbm,\n        deepaffects: fetchedDa,\n      } = fetchedData;\n\n      setIbm(\n        fetchedIbm &&\n          fetchedIbm.map(uniformIbmData).reduce(\n            (stored, current) => {\n              return {\n                ...stored,\n                sentences_tone: [\n                  ...stored.sentences_tone,\n                  ...current.sentences_tone,\n                ],\n              };\n            },\n            { sentences_tone: [] }\n          )\n      );\n      setDa(fetchedDa && fetchedDa.map(uniformDaData).flat());\n\n      setSpeeches(fetchedSpeeches);\n\n      setData(true);\n    };\n\n    if (speaker != null && speaker !== \"\") {\n      setup();\n    }\n  }, [speaker, setData]);\n\n  console.log({ speeches, ibm, da });\n\n  if (speaker == null || speaker === \"\") {\n    return (\n      <Layout>\n        <center>Invalid or no speaker provided.</center>\n      </Layout>\n    );\n  }\n\n  // TODO: add case for failed fetch\n  if (data === false) {\n    return <Layout>Loading.</Layout>;\n  }\n\n  return (\n    <Layout title={`${speaker} Analytics`}>\n      <Typography variant=\"h5\" gutterBottom>\n        Aggregation Across Speeches Data Visualization\n      </Typography>\n      <DataVisualization ibm={ibm} da={da} />\n      <Typography variant=\"h5\" gutterBottom>\n        Speeches\n      </Typography>\n      {speeches != null && <SpeechList speeches={speeches} />}\n    </Layout>\n  );\n};\n\nexport default Speech;\n"],"sourceRoot":""}